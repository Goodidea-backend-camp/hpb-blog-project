openapi: 3.1.1
info:
  title: HPB-Blog系統 API
  description: 針對簡單HPB-Blog系統的 API 文件，基於 Go 後端與 Nuxt.js 前端開發。
  version: 1.0.0
servers:
  - url: http://localhost:3000/api
    description: 開發環境伺服器

tags:
  - name: 文章
    description: 與部落格文章相關的操作 (對應到 'posts' 表)
  - name: 認證
    description: 使用者身份驗證與授權 (對應到 'users' 表)

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      required:
        - id
        - username
        - created_at
        - updated_at
      properties:
        id:
          type: integer
          format: int32
          description: 使用者的唯一識別符
          example: 1
        username:
          type: string
          description: 使用者唯一的帳號名稱
          example: "john_doe"
        created_at:
          type: string
          format: date-time
          description: 使用者創建時的時間戳記
          example: "2023-10-27T10:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: 使用者上次更新時的時間戳記
          example: "2023-10-27T10:00:00Z"

    AuthorInfo:
      type: object
      required:
        - id
        - username
      properties:
        id:
          type: integer
          format: int32
          description: 作者的唯一識別符
          example: 1
        username:
          type: string
          description: 作者的帳號名稱
          example: "john_doe"

    Article:
      type: object
      required:
        - id
        - author
        - title
        - slug
        - content
        - created_at
        - updated_at
      properties:
        id:
          type: integer
          format: int32
          description: 文章 (貼文) 的唯一識別符
          example: 101
        author:
          $ref: '#/components/schemas/AuthorInfo'
          description: 文章作者的資訊
        title:
          type: string
          description: 文章標題
          example: "我的第一篇部落格文章"
        slug:
          type: string
          description: 文章的 SEO 友善 URL 簡稱
          example: "my-first-blog-post"
        content:
          type: string
          description: 文章的完整內容，支援 Markdown 格式
          example: "# 歡迎\n\n這是 **Markdown** 內容。"
        published_at:
          type: [string, "null"]
          format: date-time
          description: 文章發布的日期和時間。如果尚未發布則為 null (草稿)。
          example: "2023-10-27T10:00:00Z"
        created_at:
          type: string
          format: date-time
          description: 文章創建時的時間戳記
          example: "2023-10-27T09:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: 文章上次更新時的時間戳記
          example: "2023-10-27T09:30:00Z"

    NewArticle:
      type: object
      required:
        - title
        - content
      properties:
        title:
          type: string
          description: 新文章的標題
          example: "一篇全新的文章"
        content:
          type: string
          description: 新文章的內容，支援 Markdown 格式
          example: "這是新文章的 *主體*。"
        slug:
          type: string
          description: 選填的 SEO 友善 URL 簡稱。如果未提供，將從標題自動生成。
          example: "a-brand-new-article"
        published_at:
          type: [string, "null"]
          format: date-time
          description: 新文章的發布時間戳記。若為 null，則文章將為草稿狀態。
          example: "2023-10-28T10:00:00Z"

    UpdateArticle:
      type: object
      properties:
        title:
          type: string
          description: 文章的更新標題
          example: "一篇更新後的文章標題"
        content:
          type: string
          description: 文章的更新內容，支援 Markdown 格式
          example: "文章的 *更新* 主體。"
        slug:
          type: string
          description: 更新後的 SEO 友善 URL 簡稱。
          example: "an-updated-article-title"
        published_at:
          type: [string, "null"]
          format: date-time
          description: |
            發布文章的時間戳記。
            設定為一個日期時間值以發布文章；設定為 null 則取消發布 (設為草稿)。
            如果未提供此字段，則保持文章現有的發布狀態不變。
          example: "2023-10-28T12:00:00Z"

    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: 作者的帳號名稱 (對應到 'users.username')
          example: "author_user"
        password:
          type: string
          description: 作者的密碼
          example: "securepassword123"

    LoginResponse:
      type: object
      required:
        - token
        - user
      properties:
        token:
          type: string
          description: 用於認證請求的 JWT token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        user:
          $ref: '#/components/schemas/User'
          description: 已認證使用者的基本資訊

    Error:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: 錯誤訊息
          example: "無效的輸入"

paths:
  /articles:
    get:
      tags: [文章]
      summary: 取得所有已發布文章
      description: 取得所有已發布文章的列表，依據 `published_at` 排序 (最新在前)。
      operationId: getAllArticles
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
            minimum: 1
          description: 分頁的頁碼。
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          description: 每頁的文章數量。
      responses:
        '200':
          description: 文章列表
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Article'
        '500':
          description: 內部伺服器錯誤
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags: [文章]
      summary: 創建新文章
      description: 允許已認證的作者創建新文章。
      operationId: createArticle
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewArticle'
      responses:
        '201':
          description: 文章創建成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        '400':
          description: 無效的請求
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 未經授權
        '403':
          description: 禁止訪問
        '409':
          description: 衝突
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: 無法處理的實體
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 內部伺服器錯誤
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /articles/{slug}:
    get:
      tags: [文章]
      summary: 依據 slug 取得單一文章
      operationId: getArticleBySlug
      parameters:
        - in: path
          name: slug
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 文章資料
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        '404':
          description: 未找到
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 內部伺服器錯誤
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags: [文章]
      summary: 更新現有文章
      operationId: updateArticle
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: slug
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateArticle'
      responses:
        '200':
          description: 文章更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        '400':
          description: 無效的請求
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 未經授權
        '403':
          description: 禁止訪問
        '404':
          description: 未找到
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: 衝突
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: 無法處理的實體
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 內部伺服器錯誤
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags: [文章]
      summary: 刪除文章
      operationId: deleteArticle
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: slug
          required: true
          schema:
            type: string
      responses:
        '204':
          description: 文章刪除成功
        '401':
          description: 未經授權
        '403':
          description: 禁止訪問
        '404':
          description: 未找到
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 內部伺服器錯誤
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      tags: [認證]
      summary: 作者登入
      operationId: authorLogin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: 登入成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: 無效的請求
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 未經授權
        '500':
          description: 內部伺服器錯誤
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/logout:
    post:
      tags: [認證]
      summary: 作者登出
      operationId: authorLogout
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 登出成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logout successful."
        '401':
          description: 未經授權
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 內部伺服器錯誤
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
