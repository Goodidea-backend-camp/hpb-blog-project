services:
  backend:
    build:
      context: ./
      dockerfile: ./go/docker_file/Dockerfile.${ENVIRONMENT}
      args:
        GO_VERSION: ${GO_VERSION}
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}?sslmode=disable
    ports:
      - "${BACKEND_PORT}:8080"
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/healthz || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5

  frontend:
    build:
      context: ./
      dockerfile: ./nuxt/docker_file/Dockerfile.${ENVIRONMENT}
    depends_on:
      - backend
    environment:
      - API_BASE_URL=http://backend:8080
      - ENVIRONMENT=${ENVIRONMENT}
      - BACKEND_PORT=${BACKEND_PORT:-8080}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1}
    ports:
      - "${FRONTEND_PORT}:3000"
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 3s
      start_period: 5s
      retries: 3

  nginx:
    build:
      context: ./web_service/docker_file
      dockerfile: Dockerfile
      args:
        - NGINX_VERSION=${NGINX_VERSION}
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    ports:
      - "${HTTP_PORT}:80"
      - "${HTTPS_PORT}:443"
    volumes:
      - ./web_service/etc/nginx/conf.d:/etc/nginx/conf.d
      - ./www_root:/var/www/html
      - ./web_service/log/nginx:/var/log/nginx
      - ./web_service/etc/nginx/ssl:/etc/nginx/ssl
      - ./web_service/etc/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./web_service/log/cron:/var/log/cron
      - ./web_service/logrotate.d/nginx:/etc/logrotate.d/nginx

  db:
    image: ${POSTGRES_VERSION}
    restart: always
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "${HOST_POSTGRES_PORT}:5432"
    volumes:
      - ./db/postgres_data:/var/lib/postgresql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
